#!/bin/sh
#
# Adam Tavares
# Feb 7, 2014
#
# Convert images into different formats
#

#-------------------------------------------------------------
#  Configuration
#-------------------------------------------------------------
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
VERSION="ImageMagick-6.8.8-4"
INSTALL_LIB="$DIR/imagemagick"
IMAGE_MAGICK="$INSTALL_LIB/$VERSION"
OPEN_JPG_LIB="openjpeg-2.0.0"
JPG_LIB="jpeg-9"
JASPER="jasper-1.900.1"
JPG_GZ="jpegsrc.v9"
PNG_LIB="libpng-1.6.9"
TIFF_LIB="tiff-4.0.3"

install() {
	makeClean
	installDelegates
	installJasper
	installImagemagick
}
installDelegates() {
	installPngLib
	installTiffLib
	installJpgLib
}
installJasper() {
	cd $DIR/imagemagick
	unzip $JASPER.zip
	cd $JASPER
	./configure --prefix=/usr/local
	make check
	make
	make install
}
installImagemagick() {
	cd $DIR/imagemagick
	tar xvzf $VERSION.tar.gz
	cd $IMAGE_MAGICK
	./configure \
		LDFLAGS='-L/usr/local/lib' \
		CPPFLAGS='-I/usr/local/include' \
		--enable-delegate-build \
		--enable-shared \
		--disable-static \
		--disable-opencl \
		--with-quantum-depth=16 \
		--with-gslib \
		--without-wmf \
		--disable-silent-rules \
		--disable-dependency-tracking \
		--with-perl=/usr/bin/perl \
		--with-png=yes \
		--with-jpeg=yes \
		--with-jp2=yes \
		--with-tiff=yes
	#make check
	make install
}
installPngLib() {
	# install png library
	cd $DIR/imagemagick
	tar xvzf $PNG_LIB.tar.gz
	cd $PNG_LIB
	./configure --prefix=/usr/local
	#make check
	make install
}
installTiffLib() {
	# install tiff library
	cd $DIR/imagemagick
	tar xvzf $TIFF_LIB.tar.gz
	cd $TIFF_LIB
	./configure --prefix=/usr/local
	#make check
	make install
}
installJpgLib() {
	cd $DIR/imagemagick
	tar xvzf $JPG_GZ.tar.gz
	cd  $JPG_LIB
	./configure --prefix=/usr/local
	make
	make test
	make install
}
installOpenJpegLib() {
	# install jpeg library
	cd $DIR/imagemagick
	tar xvzf $OPEN_JPG_LIB.tar.gz
	cd $OPEN_JPG_LIB
	cmake -DCMAKE_INSTALL_PREFIX=/usr/local .
	#make check
	make install
}

#-------------------------------------------------------------
#  Convert jp2 file to tiff
#-------------------------------------------------------------
jp2_tiff() {
	SRC=$1
	OUT=$2
	pathCheck $2
	SRC_TYPE=$(fileType $1)
	if [ "$SRC_TYPE" != "JPEG" ]; then
		exit_err "Source file ${SRC} is not a jpeg."
	fi
	convert $SRC -compress jpeg -define tiff:tile-geometry=256x256 "ptif:${OUT}"
}

#-------------------------------------------------------------
#  Convert jp2 file to jpeg
#-------------------------------------------------------------
jp2_jpeg() {
	SRC=$1
	OUT=$2
	pathCheck $2
	SRC_TYPE=$(fileType $1)
	if [ "$SRC_TYPE" != "JPEG" ]; then
		exit_err "Source file ${SRC} is not a jp2 file."
	fi
	jasper -f $SRC -F $OUT -T jpg
}

#-------------------------------------------------------------
#  Convert jpg file to tiff
#-------------------------------------------------------------
jpg_tiff() {
	SRC=$1
	OUT=$2
	pathCheck $2
	SRC_TYPE=$(fileType $1)
	if [ "$SRC_TYPE" != "JPEG" ]; then
		exit_err "Source file ${SRC} is not a jp2 file."
	fi
	convert $SRC -compress jpeg -define tiff:tile-geometry=256x256 "ptif:${OUT}"
}

#-------------------------------------------------------------
#  Return filetype
#-------------------------------------------------------------
fileType() {
	TYPE=$(file $1 |tail -1|cut -d' ' -f2)
	echo $TYPE
}

#-------------------------------------------------------------
#  Print ImageMagick config
#-------------------------------------------------------------
config() {
	convert -list configure
}

#-------------------------------------------------------------
#  Exit and print errors
#-------------------------------------------------------------
exit_err() {
  [ $# -gt 0 ] && echo "fatal: $*" 1>&2
  exit 1
}

#-------------------------------------------------------------
#  Check the output path and make intermediate directories
#-------------------------------------------------------------
pathCheck() {
	OUT=$1
	OUTPATH=$( dirname $OUT )
	if [ ! -d "$OUTPATH" ]; then
		echo "Output directory not found.  New directory created at $OUTPATH"
		mkdir -p $OUTPATH
	fi
}

#-------------------------------------------------------------
#  Remove build directories
#-------------------------------------------------------------
makeClean() {
	rm -rf $IMAGE_MAGICK
	rm -rf $INSTALL_LIB/$JPG_LIB
	rm -rf $INSTALL_LIB/$OPEN_JPG_LIB
	rm -rf $INSTALL_LIB/$PNG_LIB
	rm -rf $INSTALL_LIB/$TIFF_LIB
	rm -rf $INSTALL_LIB/$JASPER
}

#-------------------------------------------------------------
#  List supported ImageMagick formats
#-------------------------------------------------------------
formats() {
	convert -list configure | grep DELEGATES
}

#-------------------------------------------------------------
#  What shall I do for you, sire?
#-------------------------------------------------------------
CMD=$(echo "$1" | sed 's/\/$//'); shift

#-------------------------------------------------------------
#  Well I gotta do something!
#-------------------------------------------------------------
if [ -z "$CMD" ]; then
	exit_err "No command was specified"
fi

#-------------------------------------------------------------
#  Okay let's get configured...
#-------------------------------------------------------------
export MAGICK_HOME="$DIR/imagemagick/build"
export PATH="$MAGICK_HOME/bin:$PATH"
LD_LIBRARY_PATH="${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}$MAGICK_HOME/lib"
export LD_LIBRARY_PATH
export DYLD_LIBRARY_PATH="$MAGICK_HOME/lib/"

#-------------------------------------------------------------
#  Install all the image conversion code
#-------------------------------------------------------------
if [ "$CMD" = "install" ]; then
	install
	
#-------------------------------------------------------------
#  Remove build directories
#-------------------------------------------------------------
elif [ "$CMD" = "makeClean" ]; then
	makeClean
	
#-------------------------------------------------------------
#  Convert jp2 file to jpeg
#-------------------------------------------------------------
elif [ "$CMD" = "jp2_jpeg" ]; then
	SRC=$(echo "$1" | sed 's/\/$//'); shift
	OUT=$(echo "$1" | sed 's/\/$//'); shift
	jp2_jpeg $SRC $OUT
	
#-------------------------------------------------------------
#  Convert jp2 file to tiff
#-------------------------------------------------------------
elif [ "$CMD" = "jp2_tiff" ]; then
	SRC=$(echo "$1" | sed 's/\/$//'); shift
	OUT=$(echo "$1" | sed 's/\/$//'); shift
	jp2_tiff $SRC $OUT
	
#-------------------------------------------------------------
#  Convert jpg file to tiff
#-------------------------------------------------------------
elif [ "$CMD" = "jpg_tiff" ]; then
	SRC=$(echo "$1" | sed 's/\/$//'); shift
	OUT=$(echo "$1" | sed 's/\/$//'); shift
	jpg_tiff $SRC $OUT
	
#-------------------------------------------------------------
#  Print ImageMagick config
#-------------------------------------------------------------
elif [ "$CMD" = "config" ]; then
	config
	
#-------------------------------------------------------------
#  List supported ImageMagick formats
#-------------------------------------------------------------
elif [ "$CMD" = "formats" ]; then
	formats
	
#-------------------------------------------------------------
#  Feed a text file with image path sources
#-------------------------------------------------------------
elif [ "$CMD" = "text" ]; then
	TXT=$(echo "$1" | sed 's/\/$//'); shift
	FORMAT=$(echo "$1" | sed 's/\/$//'); shift
	while read file
	do
		echo $file
		#if [ "$FORMAT" = "jpg" ]; then
		#elif [ "$FORMAT" = "png" ]; then
		#elif [ "$FORMAT" = "tiff" ]; then
		#fi
	done < $TXT
	
#-------------------------------------------------------------
#  Feed a text file with image path sources
#-------------------------------------------------------------
elif [ "$CMD" = "dir" ]; then
	SRCDIR=$(echo "$1" | sed 's/\/$//'); shift
	OUTDIR=$(echo "$1" | sed 's/\/$//'); shift
	FORMAT=$(echo "$1" | sed 's/\/$//'); shift
	while read file
	do
		echo $file
	done < $(find $SRCDIR)
	
#-------------------------------------------------------------
#  Command not found
#-------------------------------------------------------------
elif [ 1 -eq 1 ]; then
	exit_err "Command ${CMD} not found"
fi
